import random


class EavesdropperDetector:
    """
    EavesdropperDetector class manages the execution of the BB84 protocol 
    and checks for eavesdropping.

    Attributes:
    - key_sequence (list): A sequence of key bits generated by the BB84 protocol.
    """

    key_sequence = []

    @classmethod
    def runBB84Protocol(cls):
        """
        Executes the BB84 protocol to generate a sequence of key bits.

        Note: In a real-world application, this would involve quantum mechanics.
              For this mock implementation, we generate a random binary sequence.
        """
        cls.key_sequence = [random.choice([0, 1]) for _ in range(8)]

    @classmethod
    def detectEavesdropping(cls) -> bool:
        """
        Detects if eavesdropping has occurred during the BB84 protocol execution.

        For this mock implementation: if we have more than 2 '1's in the sequence, 
        we consider it as eavesdropped.

        Returns:
        - bool: True if eavesdropping is detected, False otherwise.
        """
        if cls.key_sequence.count(1) > 2:
            cls.alertUser()
            return True
        return False

    @classmethod
    def alertUser(cls):
        """
        Alerts the user if eavesdropping is detected.

        Note: In a real-world application, this would involve some GUI or notification mechanism.
              For this mock implementation, we simply print an alert.
        """
        print("Eavesdropping detected!")
