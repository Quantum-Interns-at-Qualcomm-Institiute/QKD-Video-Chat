import random

class KeyGenerator:
    def generate_key_sequence(self):
        # Generate key sequence
        key_sequence = [random.choice([0, 1]) for _ in range(8)] # Temporary
        return key_sequence
class BB84Handler:
    """
    BB84Handler class manages the execution of the BB84 protocol for quantum key distribution 
    and checks for potential eavesdropping.

    Attributes:
    - key_sequence (list): A sequence of key bits generated by the BB84 protocol.
    """

    def __init__(self, key_generator):
        key_sequence = key_generator

    
    def runBB84Protocol(self):
        """
        Executes the BB84 protocol to generate a sequence of key bits.

        Note: This is a mock implementation for demonstration. In a real-world scenario, this 
              would involve actual quantum communication mechanisms to exchange qubits 
              and create a shared secret key.

        The function generates a random binary sequence to represent the quantum key.
        """
        self.key_sequence = self.key_generator.generate_key_sequence()

    
    def getQuantumKey(self) -> list:
        """
        Retrieves the quantum key generated by the BB84 protocol.

        Returns:
        - list: A sequence of key bits.
        """
        return self.key_sequence

    
    def detectEavesdropping(self, key_sequence) -> bool:
        """
        Detects potential eavesdropping during the BB84 protocol execution.

        Note: This is a mock implementation for demonstration. In a real-world scenario, 
              eavesdropping detection would be based on the comparison of a subset of the 
              key bits between the two parties, looking for discrepancies due to the 
              no-cloning theorem in quantum mechanics.

        For this mock implementation: 
        If more than 2 '1's are present in the sequence, eavesdropping is considered detected.

        Returns:
        - bool: True if eavesdropping is suspected, False otherwise.
        """
        return key_sequence.count(1) > 2
